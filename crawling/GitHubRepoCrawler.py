""" Get additional information for each found repository for further analysis.

    Take a list of all potentially relevant repositories generated by GitHubRepoSummarizer.py.
    Generates a list containing additional information provided by the Github API.
    To call this script with some basic authentication, it accepts a Github user name and the corresponding passwort or token.
"""

import os
import sys
import time

from github import Github, GithubException, UnknownObjectException, RateLimitExceededException


# call this script via 'python3 GithubOerRepoCrawler.py <GitHub user name> <GitHub user password>'
g = Github(sys.argv[1], sys.argv[2])

script_path = os.path.dirname(os.path.realpath(__file__))

input_file = open(os.path.join(
    script_path, "Crawling", "RepositoriesAndForks.txt"), "r")
oer_repos_raw = input_file.readlines()
oer_repos = [repo.split(";")[0].strip() for repo in oer_repos_raw]
input_file.close()

topic_file = open(os.path.join(
    script_path, "Searching", "Topics.txt"), "r")
topics_searched_raw = topic_file.readlines()
topics_searched = [topic.rstrip() for topic in topics_searched_raw]
topic_file.close()

output_file = open(
    os.path.join(script_path, "Crawling",
                 "RepositoriesInformation.txt"), "w")

# result file's headline
output_file.write(
    "full name;stars;is fork;forked from;forks;commits;branches;pull requests all;pull requests open;pull requests closed;contributors;watchers;issues;topics;license name;license description;\n")

i = 0

while i < len(oer_repos):
    try:
        try:
            print("Crawling " + oer_repos[i])

            git_repo = g.get_repo(oer_repos[i])

            # Seperate API requests from output writing to avoid broken information lines
            # in case of Rate Limit exceptions
            repo_information = []

            repo_information.append(str(git_repo.full_name) + ";")
            repo_information.append(str(git_repo.stargazers_count) + ";")
            repo_information.append(str(git_repo.fork) + ";")
            if(git_repo.fork == True): 
                repo_information.append(str(git_repo.parent.full_name) + ";")
            else:
                repo_information.append("None;")
            repo_information.append(str(git_repo.forks_count) + ";")

            # Connection failures, timeouts or missing information could lead to exceptions
            # when requesting against the Github API.
            # Actually most information should be available, so exceptions are expected to
            # represent connection errors. Probably results could be improved by implementing
            # retry and timeouts for requests.
            try:
                repo_information.append(
                    str(git_repo.get_commits().totalCount) + ";")
            except GithubException:
                repo_information.append("No commits;")
            try:
                repo_information.append(
                    str(git_repo.get_branches().totalCount) + ";")
            except GithubException:
                repo_information.append("No branches;")
            try:
                repo_information.append(
                    str(git_repo.get_pulls(state="all").totalCount) + ";")
            except GithubException:
                repo_information.append("No PRs;")
            try:
                repo_information.append(
                    str(git_repo.get_pulls(state="open").totalCount) + ";")
            except GithubException:
                repo_information.append("No PRs;")
            try:
                repo_information.append(str(git_repo.get_pulls(
                    state="closed").totalCount) + ";")
            except GithubException:
                repo_information.append("No PRs;")
            try:
                repo_information.append(
                    str(git_repo.get_contributors().totalCount) + ";")
            except GithubException:
                repo_information.append("No contributors;")
            try:
                repo_information.append(
                    str(git_repo.get_watchers().totalCount) + ";")
            except GithubException:
                repo_information.append("No watchers;")
            try:
                repo_information.append(
                    str(git_repo.get_issues().totalCount) + ";")
            except GithubException:
                repo_information.append("No issues;")
            try:
                repo_topics = git_repo.get_topics()
                output_topics = ""
                for topic in repo_topics:
                    if topic in topics_searched:
                        output_topics += topic + " "
                if(output_topics == ""):
                    output_topics = "No Topics;"
                repo_information.append(output_topics.strip() + ";")
            except GithubException:
                repo_information.append("No topics;")
            try:
                repo_information.append(
                    str(git_repo.get_license().license.name) + ";")
            except GithubException:
                repo_information.append("No license;")
            try:
                repo_information.append(
                    str(git_repo.get_license().license.description) + ";")
            except GithubException:
                repo_information.append("No license description;")

            for info in repo_information:
                output_file.write(info)

            output_file.write("\n")

            i += 1

        # if a repository is taken offline or formatting errors occur for example
        # simply ignore that entry and continue with the next
        except UnknownObjectException:
            i += 1

    except RateLimitExceededException:
        print("Rate Limit exceeded")
        print("Going to sleep for 15 min before restarting")
        print("zzz...")
        # sleep 15 min to reset rate limits
        time.sleep(900)

output_file.close()
